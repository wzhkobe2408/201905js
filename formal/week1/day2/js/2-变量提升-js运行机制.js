/*
* 目标：
*   1. 掌握js的作用域分类、以及作用域的作用
*   2. 理解js的运行机制、函数运行的机制
*
* */

// 变量提升：js代码执行前，对所有声明过的变量，进行提前的声明或者定义，带var的只声明不定义，值默认是undefined；
// 带function的提前声明并定义。
// 变量提升收，代码才开始执行？如何执行？

console.log(num);
var num = 12;

var obj = {
	name: 'zf',
	age: '10'
};

console.log(zf);
function zf(str) {
	var age = 10;
	console.log(str, age)
}

zf("珠峰");


// js运行机制：

// 1. js的运行环境：作用域
// 作用域是浏览器中栈内存，是js运行的环境，同时也是基本数据类型的保存位置。js的作用域，分为以下几种：
// 全局作用域：当页面打开时，浏览器首先形成一个全局作用域，用于执行全局中的代码，全局作用域就是window对象
// 私有作用域（函数作用域）当函数执行时，会形成一个函数作用域，这个作用域用于执行函数中的代码、保存函数中的基本数据类型
// 块级作用域（ES6）：类似私有作用域，js中的代码块（if/for）拥有作用域

// js 代码的执行过程：
// 在js代码执行之前，浏览器会开辟一个全局的作用域，然后开始对全局中的变量提升，完成变量提升后，开始执行全局中的代码
// 当执行到 var 变量 = 值时，对变量进行赋值，进过赋值后变量才代表这个值。当执行到function定义是会跳过；

// 如果给变量赋值的基本数据类型，就在该作用域中存储该基本数据类型值；如果遇到引用数据类型，那么浏览器会为这个引用数据类型分配一个堆内存，然后把引用数据类型的值存到堆内存中，最后把这个堆内存地址赋值给变量（此时这个地址就是保存在作用域中的）；

// 如果遇到函数执行时，会经历以下几步：
// 1. 浏览器开辟一个私有作用域；
// 2. 函数形参赋值，把执行时的实参赋值给形参变量；
// 3. 私有作用域中变量提升
// 4. 函数代码从上到下执行

// 私有变量和全局变量
// 全局变量：在全局作用域中声明的变量
// 私有变量：函数的形参以及在函数中声明的私有变量

// 变量提升只发生在当前作用域，如果函数不执行，函数中的变量不会进行变量提升。




























