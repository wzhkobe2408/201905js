// git：分布式的版本管理工具；git在中央服务器上（远程仓库）有一套版本库，但是在每个项目成员的本地都有一份版本库；

// svn: 集中式版本管理工具；在中央服务器上有一套版本库，在项目成员的本地没有版本库；

// 三个区：工作区、暂存区、历史区
// 暂存区和历史区都在版本库中，但是只有历史区中的才算是版本；

// 创建一个版本：

// 1. 版本用来记录修改，只有先修改本地仓库中的文件，才有可能生成版本；
// 2. git status 查看当前的状态；（查看你改了哪些东西，这些改动是否都需要保留）；如果文件为红色，说明文件处于工作区，如果为绿色说明在暂存区；

// 每个分支都有自己的独立的版本库，如果在某个分支上修改要保留在当前分支上，就需要把修改添加到当前分支的版本库（git add . -> git commit ），如果不添加到分支的版本库，切换分支的时候就会带到其他的分支；

// 3. git add . 或者 git add 文件名 把变更添加到暂存区
// 4. git status 此时文件是绿色的
// 5. git commit -m'创建当前版本的注释'

// 经过上面的操作只是把修改添加到了本地版本库，我们还需要同步到远程仓库；
// 在本地仓库和远程仓库的时候（push），只把本地仓库中的历史区中新产生的版本同步到远程仓库；

// 6. 先pull： git pull origin 分支名
// 7. 再push：git push origin 分支名


// git 分支

// master ：创建远程仓库的时候默认新建的一个分支；master中存放的都是在线上运行的代码，都是经过测试没有问题的代码；

// 开发的时候都是基于master开一个新的分支用于开发，不能直接在master上搞；

// 分支：
// 新建分支：
// 1. git checkout -b 分支名 【新建并切换到新分支】
// 2. git branch 分支名 【新建分支，但是不会切换】

// 查看当前所在的分支：
// git branch -v 【带*的是当前所在的分支】

// 切换分支：
// git checkout 分支名 【切换到指定分支名的分支上】
// git checkout - 切换到上一次的分支

// 删除分支：
// git branch -D 分支名  【删除分支】

// 合并分支：
// git merge 分支名 【把指定的分支合并到当前分支】

// 回滚：要搞清楚回滚到哪个版本号
// 1. 通过git log 找到你要回滚到的版本号
// 2. git reset --hard 版本号
